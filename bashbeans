#!/bin/bash

#todo
##.bashbeans settings (global ~/. and per project and per machine)
###folders, classpath/ext, platform info, compilers, etc.,
###cooperate with git (gitignore for machine specific and hashes)
###detect machine settings (os, which md5sum?, )
##support for java and clojure
###put compiler scripts into global ~/.
###javac + compiler jars vs. scalac,clojurec,...
###pass names without .ext, and let it figure it out?
##save last few hashes and mock me if I tried the exact same thing already :D
###also "compile by lookup"
##make a github repo
#toimprove
#search .bashbeanshash and shift out already compiled, instead of doing a pure compare

#links
## http://www.codecommit.com/blog/scala/joint-compilation-of-scala-and-java-sources
## http://code.google.com/p/simple-build-tool/
starttime="$(date +%s)"

#load settings
##@put to file, read lines and execute them
##@make bashbeansinit to generate such files
hashpath="../.bashbeanhash"
os="linux"
hashfunc="md5sum" #any will do, really, it only needs input as hashfunc <files>
projectname="Angry Pigs"
runname="AngryPigs"
pathprocess="echo"
#setuppath="../.bashbeansetup"
#if [ -e $setuppath ]; then
#    #lol="l"
#    ./$setuppath
#fi

originalcall="$*"

cd src
echo "$projectname"

#get arguments, process switches
#@do it with getopt(s)
if [ $# -gt 0 ]; then
    for i do
        case "$i" in #dont take the strings seriously - they're used as booleans ;)
            "-f") Force="m*a";shift;;
            "-r") Run="yes please";shift;;
            "-R") Run="yes please";Unforce="<- means don't ever compile";shift;;
            "--cygwin") pathprocess="cygpath -wp";shift;;
        esac
    done
    files="$@"
fi
if [ "$files" == "" ]; then
    files="  *.scala" 
fi

#hash func
##@ getpath za $1?
fileshash="`$hashfunc ../$0 $files`" #must be compiled with same bashbeans script
#echo "$fileshash"

#build
if [ "$Unforce" != "" ]; then
    echo "You told me not to compile."
    builderror="0"
elif [ "$Force" == "" -a -e $hashpath -a "$fileshash" == "`cat $hashpath`" ]; then
    echo "I don't think I need to compile. (use force if neccesary.)"
    builderror="0"
else
    builderror="0"
    #might still need it for Scala->Clojure interop :P
    #if [ "$builderror" == "0" ]; then
    #    echo "Compiling:"$files2
        #clojurec -d ../class -extdirs $files2
        
        #remove .clj
        #for file in AngryPigs/$files2
        #do
        #    ffiles2="$ffiles2 `basename $file .clj`"
        #done
        #java -cp .:../class:../lib/clojure.jar -Dclojure.compile.path=../class clojure.lang.Compile $ffiles2
        #java -cp .:../class:../class/AngryPig:../lib/clojure.jar -Dclojure.compile.path=../class clojure.lang.Compile AngryPig.helloworld
    #    builderror=$?
    #fi
    if [ "$builderror" == "0" ]; then
        echo "Compiling:"$files
        #fast scala compile (loads compile deamon)
        #@detect if it says Deamon not loaded and retry, or fallback to scala
        #@also this will be a part of compiler spec later
        compileErr=$( { fsc -deprecation -cp "`$pathprocess ../lib/clojure.jar:../class/AngryPigs:../class:.`" -d ../class -extdirs ../lib/lwjgl-2.7.1/jar/ $files ; } 2>&1 )
        builderror=$?
        if [ "$compileErr" != "" ]; then
            echo "$compileErr"
            
            if [ "$compileErr" == "Could not connect to compilation daemon." ]; then
                echo "OK, let's try this again..."
                echo ""
                cd ..
                echo "\$ $0 $originalcall"
                $0 $originalcall
                exit 0
            fi
        fi
    fi
    
    #write hashes
    if [ "$builderror" == "0" ]; then
        echo "$fileshash" > $hashpath
    fi
fi
buildtime="$(date +%s)"
elapsedtime="$(expr $buildtime - $starttime)"
echo "Done("$builderror") in ${elapsedtime}s."

#run it
if [ "$builderror" == "0" -a "$Run" != "" ]; then
    cd ..
    scala -cp "`$pathprocess .:src/:src/AngryPigs:class/AngryPigs:lib/lwjgl-2.7.1/jar/lwjgl.jar:lib/lwjgl-2.7.1/jar/lwjgl_util.jar:class:lib/clojure.jar`" -Djava.library.path="`$pathprocess lib/lwjgl-2.7.1/native/macosx/:lib/lwjgl-2.7.1/native/linux/:lib/lwjgl-2.7.1/native/windows/`" AngryPigs.Game
fi
